/*doc
---
title: View Head
name: viewHead
category: Views
---
The `view-head` element is the first child (the
fixed top nav bar) within every view.

```
<div class="view">
	<header class="view-head row inverted">
		<a href="#" class="row-item row-item--shrink row-item--alignMiddle">[...]</a>
		<a href="#" class="row-item row-item--alignMiddle">Page Title</a>
		<a href="#" class="row-item row-item--shrink row-item--alignMiddle">[...]</a>
	</header>
</div>
```

## view-head variants
A class of `.view-head` is required for view headers. The following classes
are optional variants (most likely added/removed with javascript to accommodate
hero headers).

Class                      | Description
-------------------------- | ---------------------------
`.view-head--transparent`  | Makes view header transparent; hides `h1` heading
`.view-head--photoOverlay` | Same as 'transparent' variant, but adds text protext gradient

*/
.view-head {
	@include box-sizing(border-box);
	background: $C_accent;
	color: $C_textPrimaryInverted;
	left: 0;
	position: fixed;
	top: 0;
	width: 100%;
	z-index: map-get($zindex-map, "main-header");
	height: $view-head-height;
	padding: 0 $space;

	@include atMediaUp(large){
		height: $view-head-height-tablet;
	}
}

@include atMediaUp(medium){
	.view-head {
		.view--splitList & {
			border-right: 1px solid $C_border;
			width: $view-minWidth;
		}
		.view--splitDetail & {
			left: $view-minWidth;
			right: 0;
			width: auto;
		}
	}
}

//
// view-head variants
//
.view-head--transparent {
	background: transparent;
	border-bottom: none;
	color: $C_textPrimaryInverted;
	h1 { // assumes there's only ever one h1 in view-head
		opacity: 0;
	}
}

.view-head--photoOverlay {
	@include background(linear-gradient(transparentize($C_scrimGradient, .2), transparentize($C_scrimGradient, 1) ));
}
